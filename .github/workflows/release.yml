name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '7.0.x'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Set version from tag
      run: |
        TAG_NAME=$(echo $GITHUB_REF | cut -d '/' -f 3)
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        VERSION=${TAG_NAME#v}
        echo "Updating project version to $VERSION"
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$VERSION<\/AssemblyVersion>/g" Micopy.csproj
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$VERSION<\/FileVersion>/g" Micopy.csproj
        cat Micopy.csproj
      working-directory: src/Micopy

    - name: Restore dependencies
      run: dotnet restore
      working-directory: src/Micopy

    - name: Build application
      run: dotnet build --configuration Release --no-restore
      working-directory: src/Micopy

    - name: Publish application for Windows
      run: dotnet publish --configuration Release --no-restore --self-contained -r win-x64 -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o publish/win-x64 /p:DebugType=None
      working-directory: src/Micopy

    - name: Publish application for Linux
      run: dotnet publish --configuration Release --no-restore --self-contained -r linux-x64 -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o publish/linux-x64 /p:DebugType=None
      working-directory: src/Micopy

    - name: Publish application for ARM
      run: dotnet publish --configuration Release --no-restore --self-contained -r linux-arm -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o publish/linux-arm /p:DebugType=None
      working-directory: src/Micopy

    - name: Zip publish folders
      run: |
        sudo apt-get install zip
        zip -r publish/win-x64.zip publish/win-x64
        zip -r publish/linux-x64.zip publish/linux-x64
        zip -r publish/linux-arm.zip publish/linux-arm
        ls publish
      working-directory: src/Micopy

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Windows asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src/Micopy/publish/win-x64.zip
        asset_name: micopy-win-x64.zip
        asset_content_type: application/zip

    - name: Upload Linux asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src/Micopy/publish/linux-x64.zip
        asset_name: micopy-linux-x64.zip
        asset_content_type: application/zip

    - name: Upload ARM asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src/Micopy/publish/linux-arm.zip
        asset_name: micopy-linux-arm.zip
        asset_content_type: application/zip
